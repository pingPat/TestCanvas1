package com.example.testcanvasv1;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.GooglePlayServicesClient.ConnectionCallbacks;
import com.google.android.gms.common.GooglePlayServicesClient.OnConnectionFailedListener;
import com.google.android.gms.common.GooglePlayServicesUtil;
import com.google.android.gms.location.LocationClient;
import com.google.android.gms.location.LocationListener;
import com.google.android.gms.location.LocationRequest;

import android.support.v7.app.ActionBarActivity;
import android.content.Context;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.location.Location;
import android.os.Bundle;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.Window;
import android.view.WindowManager;
import android.widget.Toast;


public class MainActivity extends ActionBarActivity {

	private static final String TAG = "Main";
	private SensorManager mSensorManager;
	private Sensor mSensor,accelerometer,magnetometer;
	float[] mGravity;
    float[] mGeomagnetic;
    float degree,azimuthInDegress;
	private DrawSurfaceView mDrawView;
	double lat = -33.870932;
	double lng = 151.204727;
	LocationClient locMgr;
	
	private final SensorEventListener mSensorListener = new SensorEventListener() {
		public void onSensorChanged(SensorEvent event) {
			//Log.e(TAG, "sensorChanged (" + event.values[0] + ", " + event.values[1] + ", " + event.values[2] + ")");
			if (event.sensor.getType() == Sensor.TYPE_ACCELEROMETER){
	            mGravity = event.values;
	        }
	        if (event.sensor.getType() == Sensor.TYPE_MAGNETIC_FIELD)
	            mGeomagnetic = event.values;
	        if (mGravity != null && mGeomagnetic != null) {
	            float R[] = new float[9];
	            float I[] = new float[9];
	            boolean success = SensorManager.getRotationMatrix(R, I, mGravity, mGeomagnetic);
	            if (success) {
	            	float orientation[] = new float[3];
	            	SensorManager.getOrientation(R, orientation);
	            	degree = orientation[0]; // orientation contains: azimut, pitch and roll
	            	azimuthInDegress = (float)Math.toDegrees(degree);
	            	if (azimuthInDegress < 0.0f) {
	            		azimuthInDegress += 360.0f;
	            	}           	
	            }
	        }
	        
	        float true_deg = true_compass(azimuthInDegress);
	        
			if (mDrawView != null) {
				mDrawView.setOffset(true_deg);
				//mDrawView.setOffset(event.values[0]);
				//mDrawView.setMyLocation(lat, lng);
				//Log.e(TAG, "setMyLocation : " + lat + "," + lng);
				mDrawView.invalidate();
			}
		}

		public void onAccuracyChanged(Sensor sensor, int accuracy) {
		}
	};
	
	public static float true_compass(float deg){ //True degree when watching AR
		float t_de = deg+90;
        if(t_de>360){
        	t_de = t_de-360;
        }else if(t_de<0){
        	t_de = 360+t_de;
        }
        return t_de;
	}
	
    @Override
    protected void onCreate(Bundle savedInstanceState) {
    	requestWindowFeature(Window.FEATURE_NO_TITLE);
        getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN 
                | WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
    	super.onCreate(savedInstanceState);
        mSensorManager = (SensorManager) getSystemService(Context.SENSOR_SERVICE);
		mSensor = mSensorManager.getDefaultSensor(Sensor.TYPE_ORIENTATION);
		accelerometer = mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
        magnetometer = mSensorManager.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD);
		setContentView(R.layout.activity_main);
		
		mDrawView = (DrawSurfaceView) findViewById(R.id.drawSurfaceView);
        
        boolean result = isServicesAvailable();        
        if(result) {
            // ในเครื่องมี Google Play Services
        	locMgr = new LocationClient(this, mCallback, mListener);
        } else {
            // ในเครื่องไม่มี Google Play Services ติดตั้งอยู่
        	finish();
        }

    }
    
    @Override
	protected void onResume() {
		Log.d(TAG, "onResume");
		super.onResume();

		mSensorManager.registerListener(mSensorListener, mSensor, SensorManager.SENSOR_DELAY_GAME);
		mSensorManager.registerListener(mSensorListener, accelerometer, SensorManager.SENSOR_DELAY_UI);
        mSensorManager.registerListener(mSensorListener, magnetometer, SensorManager.SENSOR_DELAY_UI);
	}
    
    protected void onStart(){
    	super.onStart();
    	locMgr.connect();
    }
    
    protected void onStop(){
    	super.onStop();
    	Log.e(TAG, "onStop");
    	mSensorManager.unregisterListener(mSensorListener);
    	locMgr.disconnect();
    }
    
    private ConnectionCallbacks mCallback = new ConnectionCallbacks() {
        public void onConnected(Bundle bundle) {
            // เชื่อมต่อกับ Google Play Services ได้
        	Toast.makeText(MainActivity.this, "Services connected", Toast.LENGTH_SHORT).show();

            LocationRequest mRequest = new LocationRequest()
                    .setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY)
                    .setInterval(5000).setFastestInterval(1000);

            locMgr.requestLocationUpdates(mRequest, locationListener);
        }

        public void onDisconnected() {
            // หยุดเชื่อมต่อกับ Google Play Services
        	Toast.makeText(MainActivity.this, "Services disconnected", Toast.LENGTH_SHORT).show();
        }
    };
    
    private OnConnectionFailedListener mListener = new OnConnectionFailedListener() {
        public void onConnectionFailed(ConnectionResult result) {
            // เมื่อเปิดปัญหาเชื่อมต่อกับ Google Play Services ไม่ได้
        	Toast.makeText(MainActivity.this, "Services connection failed", Toast.LENGTH_SHORT).show();
        }
    };
    
    private boolean isServicesAvailable() {
        int resultCode = GooglePlayServicesUtil.isGooglePlayServicesAvailable(this);
        return (resultCode == ConnectionResult.SUCCESS);
    }

    LocationListener locationListener = new LocationListener() {
        public void onLocationChanged(Location location) {
        	Log.e(TAG, "Location Changed : " + location.getLatitude() + "," + location.getLongitude());
        	//lat = location.getLatitude();
        	//lng = location.getLongitude();
        	//mDrawView.setMyLocation(-33.870932, 151.204727);
        	mDrawView.setMyLocation(location.getLatitude(), location.getLongitude());
			mDrawView.invalidate();
        }
    };

    
}
